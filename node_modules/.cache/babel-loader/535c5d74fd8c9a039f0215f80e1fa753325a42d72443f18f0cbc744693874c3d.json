{"ast":null,"code":"// userSaga.ts\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { FETCH_USERS_REQUEST, fetchUserSuccess, fetchUserFailure } from './action';\n\n// Define the response data type you expect from the API\n\n// Define the function that makes the API call\n/* const callApi = async (url: string, method: string): Promise<ApiResponseData> => {\n  try {\n    const response = await axios({\n      method,\n      url,\n      // Add any necessary data or headers here\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n */\nconst callApi = async (url, method, headers, payload) => {\n  try {\n    const config = {\n      method,\n      url,\n      headers: header,\n      data: payload // Include payload in the request if provided\n      // Add any other necessary options here\n    };\n\n    const response = await axios(config);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Define the saga function for fetching users\nfunction* fetchUserSaga(action) {\n  //function* fetchUserSaga(action: UserActionTypes) {\n\n  try {\n    console.log(\"fetchUserSaga\", action);\n    const requestData = action.data;\n    const url = `https://api-stage.daalchini.co.in${requestData.url}`;\n    const response = yield call(callApi, url, requestData.method, requestData.header);\n    console.log(\"userData\", response);\n    // Dispatch a success action with the received data\n    yield put(fetchUserSuccess(response));\n    requestData.handleResponse(response);\n\n    // Optionally, you can call the handleResponse function from the action payload\n    if (requestData.handleResponse) {\n      requestData.handleResponse(response.users);\n    }\n  } catch (error) {\n    // Dispatch a failure action if an error occurs\n    yield put(fetchUserFailure(error.message));\n  }\n}\n\n// Define the root saga\nfunction* userSaga() {\n  // Start the fetchUserSaga when FETCH_USERS_REQUEST action is dispatched\n  yield takeLatest(FETCH_USERS_REQUEST, fetchUserSaga);\n}\nexport default userSaga;","map":{"version":3,"names":["call","put","takeLatest","axios","FETCH_USERS_REQUEST","fetchUserSuccess","fetchUserFailure","callApi","url","method","headers","payload","config","header","data","response","error","fetchUserSaga","action","console","log","requestData","handleResponse","users","message","userSaga"],"sources":["/home/lenovo/Videos/Learning Videos/my youtube video/New Folder/redux-saga-typescript/src/Component/UserPage/saga.ts"],"sourcesContent":["// userSaga.ts\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport axios ,{AxiosRequestConfig}from 'axios';\nimport {\n  FETCH_USERS_REQUEST,\n  fetchUserSuccess,\n  fetchUserFailure,\n  UserActionTypes,\n  User,\n  UserRequestData,\n} from './action';\n\n// Define the response data type you expect from the API\ninterface ApiResponseData {\n  users: any; // Adjust this according to your actual API response structure\n}\n\n// Define the function that makes the API call\n/* const callApi = async (url: string, method: string): Promise<ApiResponseData> => {\n  try {\n    const response = await axios({\n      method,\n      url,\n      // Add any necessary data or headers here\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n */\n\ninterface ApiResponseData {\n  // Define your expected response data structure\n  method:any\n}\nconst callApi = async (url: string,method?: string,headers?: Record<string, string>,payload?: Record<string, any>):Promise<ApiResponseData> => {\n  try {\n    const config: AxiosRequestConfig = {\n      method,\n      url,\n      headers:header,\n      data: payload, // Include payload in the request if provided\n      // Add any other necessary options here\n    };\n\n    const response = await axios(config);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Define the saga function for fetching users\nfunction* fetchUserSaga(action: any) {\n    //function* fetchUserSaga(action: UserActionTypes) {\n\n  try {\n    console.log(\"fetchUserSaga\",action);\n    const requestData: UserRequestData = action.data;\n    const url = `https://api-stage.daalchini.co.in${requestData.url}`;\n    const response: ApiResponseData = yield call(callApi, url, requestData.method,requestData.header);\n    \n    console.log(\"userData\",response)\n    // Dispatch a success action with the received data\n    yield put(fetchUserSuccess(response));\n    requestData.handleResponse(response)\n\n    // Optionally, you can call the handleResponse function from the action payload\n    if (requestData.handleResponse) {\n      requestData.handleResponse(response.users);\n    }\n  } catch (error:any) {\n    // Dispatch a failure action if an error occurs\n    yield put(fetchUserFailure(error.message));\n  }\n}\n\n// Define the root saga\nfunction* userSaga() {\n  // Start the fetchUserSaga when FETCH_USERS_REQUEST action is dispatched\n  yield takeLatest(FETCH_USERS_REQUEST, fetchUserSaga);\n}\n\nexport default userSaga;\n"],"mappings":"AAAA;;AAEA,SAASA,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AAC1D,OAAOC,KAAK,MAA2B,OAAO;AAC9C,SACEC,mBAAmB,EACnBC,gBAAgB,EAChBC,gBAAgB,QAIX,UAAU;;AAEjB;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA,MAAMC,OAAO,GAAG,MAAAA,CAAOC,GAAW,EAACC,MAAe,EAACC,OAAgC,EAACC,OAA6B,KAA8B;EAC7I,IAAI;IACF,MAAMC,MAA0B,GAAG;MACjCH,MAAM;MACND,GAAG;MACHE,OAAO,EAACG,MAAM;MACdC,IAAI,EAAEH,OAAO,CAAE;MACf;IACF,CAAC;;IAED,MAAMI,QAAQ,GAAG,MAAMZ,KAAK,CAACS,MAAM,CAAC;IACpC,OAAOG,QAAQ,CAACD,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,UAAUC,aAAaA,CAACC,MAAW,EAAE;EACjC;;EAEF,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,eAAe,EAACF,MAAM,CAAC;IACnC,MAAMG,WAA4B,GAAGH,MAAM,CAACJ,IAAI;IAChD,MAAMN,GAAG,GAAI,oCAAmCa,WAAW,CAACb,GAAI,EAAC;IACjE,MAAMO,QAAyB,GAAG,MAAMf,IAAI,CAACO,OAAO,EAAEC,GAAG,EAAEa,WAAW,CAACZ,MAAM,EAACY,WAAW,CAACR,MAAM,CAAC;IAEjGM,OAAO,CAACC,GAAG,CAAC,UAAU,EAACL,QAAQ,CAAC;IAChC;IACA,MAAMd,GAAG,CAACI,gBAAgB,CAACU,QAAQ,CAAC,CAAC;IACrCM,WAAW,CAACC,cAAc,CAACP,QAAQ,CAAC;;IAEpC;IACA,IAAIM,WAAW,CAACC,cAAc,EAAE;MAC9BD,WAAW,CAACC,cAAc,CAACP,QAAQ,CAACQ,KAAK,CAAC;IAC5C;EACF,CAAC,CAAC,OAAOP,KAAS,EAAE;IAClB;IACA,MAAMf,GAAG,CAACK,gBAAgB,CAACU,KAAK,CAACQ,OAAO,CAAC,CAAC;EAC5C;AACF;;AAEA;AACA,UAAUC,QAAQA,CAAA,EAAG;EACnB;EACA,MAAMvB,UAAU,CAACE,mBAAmB,EAAEa,aAAa,CAAC;AACtD;AAEA,eAAeQ,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}