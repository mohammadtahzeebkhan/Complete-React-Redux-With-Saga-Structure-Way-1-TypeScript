{"ast":null,"code":"// userSaga.ts\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { FETCH_USERS_REQUEST, fetchUserSuccess, fetchUserFailure } from './action';\n\n// Define the response data type you expect from the API\n\n// Define the function that makes the API call\nconst callApi = async (url, method) => {\n  try {\n    const response = await axios({\n      method,\n      url\n      // Add any necessary data or headers here\n    });\n\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Define the saga function for fetching users\nfunction* fetchUserSaga(action) {\n  //function* fetchUserSaga(action: UserActionTypes) {\n  try {\n    const requestData = action.data;\n    const url = `https://jsonplaceholder.typicode.com/users${requestData.url}`;\n    const response = yield call(callApi, url, requestData.method);\n\n    // Dispatch a success action with the received data\n    yield put(fetchUserSuccess(response.users));\n\n    // Optionally, you can call the handleResponse function from the action payload\n    if (requestData.handleResponse) {\n      requestData.handleResponse(response.users);\n    }\n  } catch (error) {\n    // Dispatch a failure action if an error occurs\n    yield put(fetchUserFailure(error.message));\n  }\n}\n\n// Define the root saga\nfunction* userSaga() {\n  // Start the fetchUserSaga when FETCH_USERS_REQUEST action is dispatched\n  yield takeLatest(FETCH_USERS_REQUEST, fetchUserSaga);\n}\nexport default userSaga;","map":{"version":3,"names":["call","put","takeLatest","axios","FETCH_USERS_REQUEST","fetchUserSuccess","fetchUserFailure","callApi","url","method","response","data","error","fetchUserSaga","action","requestData","users","handleResponse","message","userSaga"],"sources":["/home/lenovo/Videos/Learning Videos/my youtube video/New Folder/redux-saga-typescript/src/Component/UserPage/saga.ts"],"sourcesContent":["// userSaga.ts\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  FETCH_USERS_REQUEST,\n  fetchUserSuccess,\n  fetchUserFailure,\n  UserActionTypes,\n  User,\n  UserRequestData,\n} from './action';\n\n// Define the response data type you expect from the API\ninterface ApiResponseData {\n  users: User[]; // Adjust this according to your actual API response structure\n}\n\n// Define the function that makes the API call\nconst callApi = async (url: string, method: string): Promise<ApiResponseData> => {\n  try {\n    const response = await axios({\n      method,\n      url,\n      // Add any necessary data or headers here\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Define the saga function for fetching users\nfunction* fetchUserSaga(action: any) {\n    //function* fetchUserSaga(action: UserActionTypes) {\n  try {\n    const requestData: UserRequestData = action.data;\n    const url = `https://jsonplaceholder.typicode.com/users${requestData.url}`;\n    const response: ApiResponseData = yield call(callApi, url, requestData.method);\n\n    // Dispatch a success action with the received data\n    yield put(fetchUserSuccess(response.users));\n\n    // Optionally, you can call the handleResponse function from the action payload\n    if (requestData.handleResponse) {\n      requestData.handleResponse(response.users);\n    }\n  } catch (error:any) {\n    // Dispatch a failure action if an error occurs\n    yield put(fetchUserFailure(error.message));\n  }\n}\n\n// Define the root saga\nfunction* userSaga() {\n  // Start the fetchUserSaga when FETCH_USERS_REQUEST action is dispatched\n  yield takeLatest(FETCH_USERS_REQUEST, fetchUserSaga);\n}\n\nexport default userSaga;\n"],"mappings":"AAAA;;AAEA,SAASA,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,mBAAmB,EACnBC,gBAAgB,EAChBC,gBAAgB,QAIX,UAAU;;AAEjB;;AAKA;AACA,MAAMC,OAAO,GAAG,MAAAA,CAAOC,GAAW,EAAEC,MAAc,KAA+B;EAC/E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAAC;MAC3BM,MAAM;MACND;MACA;IACF,CAAC,CAAC;;IACF,OAAOE,QAAQ,CAACC,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,UAAUC,aAAaA,CAACC,MAAW,EAAE;EACjC;EACF,IAAI;IACF,MAAMC,WAA4B,GAAGD,MAAM,CAACH,IAAI;IAChD,MAAMH,GAAG,GAAI,6CAA4CO,WAAW,CAACP,GAAI,EAAC;IAC1E,MAAME,QAAyB,GAAG,MAAMV,IAAI,CAACO,OAAO,EAAEC,GAAG,EAAEO,WAAW,CAACN,MAAM,CAAC;;IAE9E;IACA,MAAMR,GAAG,CAACI,gBAAgB,CAACK,QAAQ,CAACM,KAAK,CAAC,CAAC;;IAE3C;IACA,IAAID,WAAW,CAACE,cAAc,EAAE;MAC9BF,WAAW,CAACE,cAAc,CAACP,QAAQ,CAACM,KAAK,CAAC;IAC5C;EACF,CAAC,CAAC,OAAOJ,KAAS,EAAE;IAClB;IACA,MAAMX,GAAG,CAACK,gBAAgB,CAACM,KAAK,CAACM,OAAO,CAAC,CAAC;EAC5C;AACF;;AAEA;AACA,UAAUC,QAAQA,CAAA,EAAG;EACnB;EACA,MAAMjB,UAAU,CAACE,mBAAmB,EAAES,aAAa,CAAC;AACtD;AAEA,eAAeM,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}