{"ast":null,"code":"// VM_INVENTORYaga.ts\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { FETCH_VM_INVENTORY_REQUEST, fetchUserSuccess, fetchUserFailure } from './action';\n\n// Define the response data type you expect from the API\n\n// Define the function that makes the API call\n/* const callApi = async (url: string, method: string): Promise<ApiResponseData> => {\n  try {\n    const response = await axios({\n      method,\n      url,\n      // Add any necessary data or headers here\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n */\nconst callApi = async (url, method, headers, payload) => {\n  try {\n    const config = {\n      method,\n      url,\n      headers: headers,\n      data: payload // Include payload in the request if provided\n      // Add any other necessary options here\n    };\n\n    const response = await axios(config);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Define the saga function for fetching users\n/* function* fetchUserSaga(action: any) {\n    //function* fetchUserSaga(action: UserActionTypes) {\n\n  try {\n    console.log(\"fetchUserSaga\",action);\n    const requestData: UserRequestData = action.data;\n    const url = `https://api-stage.daalchini.co.in${requestData.url}`;\n    const response: ApiResponseData = yield call(callApi, url, requestData.method,requestData.header,requestData.payload);\n    \n    console.log(\"userData\",response)\n    // Dispatch a success action with the received data\n    yield put(fetchUserSuccess(response));\n    requestData.handleResponse(response)\n\n    // Optionally, you can call the handleResponse function from the action payload\n    if (requestData.handleResponse) {\n      requestData.handleResponse(response.users);\n    }\n  } catch (error:any) {\n    // Dispatch a failure action if an error occurs\n    yield put(fetchUserFailure(error.message));\n  }\n} */ // Assuming the 'callApi' function returns a Promise<ApiResponseData>\nexport function* fetchUserSaga(action) {\n  try {\n    const requestData = action.data;\n    const url = `https://api-stage.daalchini.co.in${requestData.url}`;\n    const response = yield call(callApi, url, requestData.method, requestData.header, requestData.payload);\n\n    // Dispatch a success action with the received data\n    requestData.handleResponse(response);\n    yield put(fetchUserSuccess(response));\n\n    // Optionally, you can call the handleResponse function from the action payload\n    if (requestData.handleResponse) {\n      requestData.handleResponse(response.users);\n    }\n  } catch (error) {\n    // Dispatch a failure action if an error occurs\n    yield put(fetchUserFailure(error.message));\n  }\n}\n\n// Define the root saga\nfunction* userSaga() {\n  // Start the fetchUserSaga when FETCH_USERS_REQUEST action is dispatched\n  yield takeLatest(FETCH_VM_INVENTORY_REQUEST, fetchUserSaga);\n}\nexport default userSaga;","map":{"version":3,"names":["call","put","takeLatest","axios","FETCH_VM_INVENTORY_REQUEST","fetchUserSuccess","fetchUserFailure","callApi","url","method","headers","payload","config","data","response","error","fetchUserSaga","action","requestData","header","handleResponse","users","message","userSaga"],"sources":["/home/lenovo/Videos/Learning Videos/my youtube video/New Folder/redux-saga-typescript/src/Component/VmInventory/saga.ts"],"sourcesContent":["// VM_INVENTORYaga.ts\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport axios ,{AxiosRequestConfig}from 'axios';\nimport { SagaIterator } from 'redux-saga'; \nimport {\n  FETCH_VM_INVENTORY_REQUEST,\n  fetchUserSuccess,\n  fetchUserFailure,\n  UserActionTypes,\n  User,\n  UserRequestData,\n} from './action';\n\n// Define the response data type you expect from the API\ninterface ApiResponseData {\n  users: any; // Adjust this according to your actual API response structure\n}\n\n// Define the function that makes the API call\n/* const callApi = async (url: string, method: string): Promise<ApiResponseData> => {\n  try {\n    const response = await axios({\n      method,\n      url,\n      // Add any necessary data or headers here\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n */\n\ninterface ApiResponseData {\n  // Define your expected response data structure\n  method:any\n}\nconst callApi = async (url: string,method?: string,headers?: Record<string, string>,payload?: Record<string, any>):Promise<ApiResponseData> => {\n  try {\n    const config: AxiosRequestConfig = {\n      method,\n      url,\n      headers:headers,\n      data: payload, // Include payload in the request if provided\n      // Add any other necessary options here\n    };\n\n    const response = await axios(config);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Define the saga function for fetching users\n/* function* fetchUserSaga(action: any) {\n    //function* fetchUserSaga(action: UserActionTypes) {\n\n  try {\n    console.log(\"fetchUserSaga\",action);\n    const requestData: UserRequestData = action.data;\n    const url = `https://api-stage.daalchini.co.in${requestData.url}`;\n    const response: ApiResponseData = yield call(callApi, url, requestData.method,requestData.header,requestData.payload);\n    \n    console.log(\"userData\",response)\n    // Dispatch a success action with the received data\n    yield put(fetchUserSuccess(response));\n    requestData.handleResponse(response)\n\n    // Optionally, you can call the handleResponse function from the action payload\n    if (requestData.handleResponse) {\n      requestData.handleResponse(response.users);\n    }\n  } catch (error:any) {\n    // Dispatch a failure action if an error occurs\n    yield put(fetchUserFailure(error.message));\n  }\n} */\n\ninterface FetchUserSagaAction {\n  type: string; // Assuming your action has a 'type' property\n  data: UserRequestData;\n}\n\n// Assuming the 'callApi' function returns a Promise<ApiResponseData>\ninterface CallApiFunction {\n  (url: string, method: string, header?: any, payload?: any): Promise<ApiResponseData>;\n}\n\nexport function* fetchUserSaga(action: FetchUserSagaAction): SagaIterator {\n  try {\n    const requestData: UserRequestData = action.data;\n    const url = `https://api-stage.daalchini.co.in${requestData.url}`;\n    const response: ApiResponseData = yield call(callApi as CallApiFunction, url, requestData.method, requestData.header, requestData.payload);\n\n    // Dispatch a success action with the received data\n    requestData.handleResponse(response)\n    yield put(fetchUserSuccess(response));\n\n    // Optionally, you can call the handleResponse function from the action payload\n    if (requestData.handleResponse) {\n      requestData.handleResponse(response.users);\n    }\n  } catch (error:any) {\n    // Dispatch a failure action if an error occurs\n    yield put(fetchUserFailure(error.message));\n  }\n}\n\n// Define the root saga\nfunction* userSaga() {\n  // Start the fetchUserSaga when FETCH_USERS_REQUEST action is dispatched\n  yield takeLatest(FETCH_VM_INVENTORY_REQUEST, fetchUserSaga);\n}\n\nexport default userSaga;\n"],"mappings":"AAAA;;AAEA,SAASA,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AAC1D,OAAOC,KAAK,MAA2B,OAAO;AAE9C,SACEC,0BAA0B,EAC1BC,gBAAgB,EAChBC,gBAAgB,QAIX,UAAU;;AAEjB;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA,MAAMC,OAAO,GAAG,MAAAA,CAAOC,GAAW,EAACC,MAAe,EAACC,OAAgC,EAACC,OAA6B,KAA8B;EAC7I,IAAI;IACF,MAAMC,MAA0B,GAAG;MACjCH,MAAM;MACND,GAAG;MACHE,OAAO,EAACA,OAAO;MACfG,IAAI,EAAEF,OAAO,CAAE;MACf;IACF,CAAC;;IAED,MAAMG,QAAQ,GAAG,MAAMX,KAAK,CAACS,MAAM,CAAC;IACpC,OAAOE,QAAQ,CAACD,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAtBA,CA6BA;AAKA,OAAO,UAAUC,aAAaA,CAACC,MAA2B,EAAgB;EACxE,IAAI;IACF,MAAMC,WAA4B,GAAGD,MAAM,CAACJ,IAAI;IAChD,MAAML,GAAG,GAAI,oCAAmCU,WAAW,CAACV,GAAI,EAAC;IACjE,MAAMM,QAAyB,GAAG,MAAMd,IAAI,CAACO,OAAO,EAAqBC,GAAG,EAAEU,WAAW,CAACT,MAAM,EAAES,WAAW,CAACC,MAAM,EAAED,WAAW,CAACP,OAAO,CAAC;;IAE1I;IACAO,WAAW,CAACE,cAAc,CAACN,QAAQ,CAAC;IACpC,MAAMb,GAAG,CAACI,gBAAgB,CAACS,QAAQ,CAAC,CAAC;;IAErC;IACA,IAAII,WAAW,CAACE,cAAc,EAAE;MAC9BF,WAAW,CAACE,cAAc,CAACN,QAAQ,CAACO,KAAK,CAAC;IAC5C;EACF,CAAC,CAAC,OAAON,KAAS,EAAE;IAClB;IACA,MAAMd,GAAG,CAACK,gBAAgB,CAACS,KAAK,CAACO,OAAO,CAAC,CAAC;EAC5C;AACF;;AAEA;AACA,UAAUC,QAAQA,CAAA,EAAG;EACnB;EACA,MAAMrB,UAAU,CAACE,0BAA0B,EAAEY,aAAa,CAAC;AAC7D;AAEA,eAAeO,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}